{"version":3,"sources":["componentes/Header.js","componentes/Formulario.js","componentes/Error.js","componentes/Clima.js","componentes/App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","titulo","Formulario","ciudadRef","React","createRef","paisRef","buscarClima","e","preventDefault","respuesta","ciudad","_this","current","value","pais","datosConsulta","onSubmit","this","ref","id","type","htmlFor","defaultValue","Component","Error","mensaje","Clima","mostrarResultado","_this$props$resultado","resultado","name","weather","main","urlIcon","concat","icon","alt","temp","toFixed","src","temp_max","temp_min","App","state","error","consulta","consultarApi","_this$state$consulta","api","url","encodeURI","trim","fetch","then","json","datos","setState","catch","console","log","prevProps","prevState","cod","componentes_Error","componentes_Clima","componentes_Header","componentes_Formulario","Boolean","window","location","hostname","match","ReactDOM","render","componentes_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.84bb08a6.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        <div>\r\n            <nav>\r\n                <div className=\"nav-wrapper light-blue darken-2\">\r\n                    <a className=\"brand-logo\">{props.titulo}</a>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    );\r\n}\r\n\r\nHeader.propTypes={\r\n    titulo: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Header;","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Formulario extends Component\r\n{\r\n    ciudadRef = React.createRef();\r\n    paisRef = React.createRef();\r\n\r\n    buscarClima = (e)=>\r\n    {\r\n        e.preventDefault();\r\n        const respuesta = \r\n        {\r\n            ciudad: this.ciudadRef.current.value,\r\n            pais: this.paisRef.current.value\r\n        }\r\n        this.props.datosConsulta(respuesta);\r\n    }\r\n\r\n    render()\r\n    {\r\n        return(\r\n            <div className=\"contenedor-form\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <form onSubmit={this.buscarClima}>\r\n                            <div className=\"input-field col s12 m8 l4 offset-m2\">\r\n                                <input ref={this.ciudadRef} id=\"ciudad\" type=\"text\" />\r\n                                <label htmlFor=\"ciudad\">Ciudad:</label>\r\n                            </div>\r\n                            <div className=\"input-field col s12 m8 l4 offset-m2\">\r\n                                <select ref={this.paisRef}>\r\n                                    <option value=\"\" defaultValue>Elige un país</option>\r\n                                    <option value=\"AR\">Argentina</option>\r\n                                    <option value=\"CO\">Colombia</option>\r\n                                    <option value=\"CR\">Costa Rica</option>\r\n                                    <option value=\"ES\">España</option>\r\n                                    <option value=\"EU\">Estados Unidos</option>\r\n                                    <option value=\"MX\">Mexico</option>\r\n                                    <option value=\"PE\">Peru</option>\r\n                                </select>\r\n                                <label htmlFor=\"pais\">País:</label>\r\n                            </div>\r\n                            <div className=\"input-field col s12 m8 l4 offset-2 buscador\">\r\n                                <input type=\"submit\" className=\"waves-effect waves-light btn-large yellow accent-4\" value=\"Buscar...\"/>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nFormulario.propTypes ={\r\n    datosConsulta: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Formulario;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Error = (props)=>\r\n{\r\n    return(\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col s12 m6 offset-m3\">\r\n                    <div className=\"card-pannel red darken-4 error\">{props.mensaje}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nError.propTypes = {\r\n    mensaje: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Error;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Clima extends React.Component\r\n{\r\n    mostrarResultado = () =>\r\n    {\r\n        //obtener datos de la consulta de props.\r\n        const {name, weather, main} = this.props.resultado;\r\n        if(!name || !weather || !main) return null;\r\n        const kelvin = 273.15;\r\n        const urlIcon = `http://openweathermap.org/img/w/${weather[0].icon}.png`;\r\n        const alt = `clima de ${name}`;\r\n        return(\r\n            <div className=\"row\">\r\n                <div className=\"resultado col s12 m8 l6 offset-m2 offset-l3\">\r\n                    <div className=\"card-pannel light-blue align-center\">\r\n                        <span className=\"white-text \">\r\n                            <h2> Resultado clima de: {name}</h2>\r\n                            <p className=\"temperatura\">\r\n                                Actual: {(main.temp - kelvin).toFixed(2)} &deg;C\r\n                                <img src={urlIcon} alt={alt}/>\r\n                            </p>\r\n                            <p>Max. {(main.temp_max - kelvin).toFixed(2)} &deg;C</p>\r\n                            <p>Max. {(main.temp_min - kelvin).toFixed(2)} &deg;C</p>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render()\r\n    {\r\n        //console.log(this.props.resultado);\r\n        return(\r\n            <div className=\"container\">\r\n                {this.mostrarResultado()}            \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nClima.propTypes={\r\n    resultado: PropTypes.object.isRequired\r\n}\r\n\r\nexport default Clima;","import React, { Component } from 'react';\nimport Header from './Header';\nimport Formulario from './Formulario';\nimport Error from './Error';\nimport Clima from './Clima';\n\nclass App extends Component {\n\n  state = \n  {\n    error: false,\n    consulta:{},\n    resultado: {}\n  }\n\n  componentDidUpdate(prevProps, prevState)\n  {\n    if(prevState.consulta !== this.state.consulta)\n    {\n      this.consultarApi();\n    }\n  }\n  \n  consultarApi = () =>\n  {\n    const{ciudad,pais} = this.state.consulta;\n    //console.log(ciudad);\n    const appId = '6437142aafe2df47588bf16341c66368';\n    let api = `http://api.openweathermap.org/data/2.5/weather?q=${ciudad},${pais}&appid=${appId}`;\n    let url = encodeURI(api.trim());\n    //console.log(url);\n\n    fetch(url)\n    .then(respuesta =>\n      {\n        return respuesta.json();\n      })\n      .then(datos =>{\n        this.setState({\n          resultado: datos\n        })\n      })\n      .catch(e =>\n        {\n          console.log(e);\n        })\n\n  }\n\n  datosConsulta = respuesta =>\n  {\n    if(respuesta.ciudad === '' || respuesta.pais === '')\n    {\n      this.setState({\n        error: true\n      });\n    }else\n    {\n      this.setState({\n        consulta: respuesta,\n        error: false\n      })\n    }\n  }\n\n  render() {\n\n    const {error} = this.state,\n    {cod} = this.state.resultado;\n    let resultado;\n\n    if(error)\n    {\n      resultado = <Error mensaje=\"ambos campos son obligatorios\" />;\n    }else if(cod === '404')\n    {\n      resultado = <Error mensaje=\"No se encontró la ciudad que estas buscando :( \" />\n    }else\n    {\n      resultado = <Clima resultado = {this.state.resultado} />;\n    }\n\n    return (\n      <div className=\"app\">\n        <Header\n          titulo = 'Clima React'\n        />\n        <Formulario\n          datosConsulta = {this.datosConsulta}\n        />\n        {resultado}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './componentes/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}